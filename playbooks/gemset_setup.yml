---
#
# http://hanamirb.org/guides/getting-started/
# https://rvm.io/workflow/projects
# NOTE: rvm isn't loaded as a function
# https://rvm.io/workflow/scripting
# http://docs.ansible.com/ansible/stat_module.html
# http://docs.ansible.com/ansible/playbooks_filters.html
# http://jinja.pocoo.org/docs/dev/templates
#

#- name: RVM - test
#  shell: type rvm | head -1
#  register: test
#  # Print the shell task's stdout.
#- debug: msg={{ test.stdout }}
#  # Print all contents of the shell task's output.
#- debug: var=test

- stat: path=~/{{ app_name }}/.versions.conf
  register: versions_conf
#- debug: msg={{ versions_conf.stat }}
#- debug: msg={{ not (versions_conf.stat.exists) }}

- name: Gemset list
  shell: rvm {{ ruby_version }} do rvm gemset list
  register: gemset_list
#- debug: msg={{ gemset_list }}
#- debug: msg={{ gemset_list.stdout_lines | map('trim') | list }}
#- debug: msg={{ not (app_name in gemset_list.stdout_lines | map('trim') | list) }}

- name: Set and create gemset
  shell: rvm {{ ruby_version }} do rvm --create --versions-conf use {{ ruby_version }}@{{ app_name }}
  args:
    chdir: ~/{{ app_name }}
  # I can't use vars instead of verbose lookup because they raise error if .versions.conf doesn't exist
  when: not (app_name in gemset_list.stdout_lines | map('trim') | list) or
        not (versions_conf.stat.exists) or
        ruby_version != lookup('ini', 'ruby type=properties file=~/{{ app_name }}/.versions.conf') or
        app_name != lookup('ini', 'ruby-gemset type=properties file=~/{{ app_name }}/.versions.conf')
