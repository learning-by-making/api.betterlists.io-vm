---
#
# http://hanamirb.org/guides/getting-started/
# https://rvm.io/workflow/projects
# NOTE: rvm isn't loaded as a function
# https://rvm.io/workflow/scripting
# http://docs.ansible.com/ansible/lineinfile_module.html
# http://docs.ansible.com/ansible/postgresql_privs_module.html
#

#- name: RVM - test
#  shell: type rvm | head -1
#  register: test
#  # Print the shell task's stdout.
#- debug: msg={{ test.stdout }}
#  # Print all contents of the shell task's output.
#- debug: var=test

- name: Install Hanami
  shell: rvm {{ ruby_version }}@{{ app_name }} do gem install hanami -v {{ hanami_version }}

- name: Application bootstrap
  shell: rvm {{ ruby_version }}@{{ app_name }} do hanami new . --application_name=api --db=postgresql --test=rspec
  args:
    chdir: ~/{{ app_name }}
    creates: Gemfile

- name: Install gems
  shell: rvm {{ ruby_version }}@{{ app_name }} do bundle install
  args:
    chdir: ~/{{ app_name }}

# hanami < 0.8.0 => database url string likes APP_NAME_DATABASE_URL=...
# hanami = 0.8.0 => database url string likes DATABASE_URL=...
- name: Configure dev db connection
  lineinfile:
    dest: ~/{{ app_name }}/.env.development
    regexp: '^(.*)DATABASE_URL='
    line: '\1DATABASE_URL="postgres://{{ app_db_user }}:{{ app_db_password }}@127.0.0.1:{{ postgres_host_port }}/{{ app_name }}_development"'
    backrefs: yes

- name: Configure test db connection
  lineinfile:
    dest: ~/{{ app_name }}/.env.test
    regexp: '^(.*)DATABASE_URL='
    line: '\1DATABASE_URL="postgres://{{ app_db_user }}:{{ app_db_password }}@127.0.0.1:{{ postgres_host_port }}/{{ app_name }}_test"'
    backrefs: yes

# http://stackoverflow.com/a/16783253
- name: check dev db exists
  shell: export PGPASSWORD='{{ postgres_password }}'; psql -U {{ postgres_user }} -h 127.0.0.1 -p {{ postgres_host_port }} -lqt | cut -d \| -f 1 | grep -qw {{ app_name }}_development
  ignore_errors: yes
  register: dev_db_exists
#- debug: msg={{ dev_db_exists }}

- name: check dev db owner
  shell: export PGPASSWORD='{{ postgres_password }}'; psql -U {{ postgres_user }} -h 127.0.0.1 -p {{ postgres_host_port }} -lqt | cut -d \| -f 1,2 | grep -w {{ app_name }}_development | cut -d \| -f 2 | grep -qw {{ app_db_user }}
  ignore_errors: yes
  register: dev_db_owner
#- debug: msg={{ dev_db_owner }}

- name: Create dev db
  shell: rvm {{ ruby_version }}@{{ app_name }} do hanami db create
  args:
    chdir: ~/{{ app_name }}
  when: dev_db_exists.rc

- name: Set dev db owner
  shell: export PGPASSWORD='{{ postgres_password }}'; psql -U {{ postgres_user }} -h 127.0.0.1 -p {{ postgres_host_port }} -c 'ALTER DATABASE "{{ app_name }}_development" OWNER TO {{ app_db_user }};'
  args:
    chdir: ~/{{ app_name }}
  when: not (dev_db_exists.rc) and dev_db_owner.rc

- name: Run migrations
  shell: rvm {{ ruby_version }}@{{ app_name }} do hanami db migrate
  args:
    chdir: ~/{{ app_name }}

- name: Prepare test db
  shell: rvm {{ ruby_version }}@{{ app_name }} do bash -c 'HANAMI_ENV=test hanami db prepare'
  args:
    chdir: ~/{{ app_name }}
